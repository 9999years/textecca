{ pkgs ? import <nixpkgs> { }, ... }:
let
  inherit (pkgs) stdenv stdenvNoCC lib fetchzip rustPlatform fetchFromGitHub;

  fetchCrate = { crate, version, ... }@attrs_:
    let attrs = removeAttrs attrs_ [ "crate" "version" ];
    in fetchTarball ({
      name = crate;
      url = "https://crates.io/api/v1/crates/${crate}/${version}/download";
    } // attrs);

  ucd = fetchzip {
    url = "https://www.unicode.org/Public/zipped/13.0.0/UCD.zip";
    sha256 = "1jn8617ai6dh22c3zmad5g617lppzzjcrynl70jw1ld47ihbgzp3";
    stripRoot = false;
  };

  ucd-generate = rustPlatform.buildRustPackage rec {
    pname = "ucd-generate";
    version = "0.2.8";

    src = fetchCrate {
      crate = "ucd-generate";
      inherit version;
      sha256 = "1kjzk57s0p37vq8ifqniymlcs5vkbv5aznzhkz2gi0g8r9mpwc38";
    };

    cargoSha256 = "0gmffbcrsa1wlkc55x4rafqyv0lzx9ngsdqlp3l42adizh5rv89g";
  };

  ucd-tables = attrs_@{ trie ? true, ... }:
    let
      trieOpt = lib.optionalString trie "--trie-set";
      joinList = strings: lib.escapeShellArg (lib.concatStringsSep "," strings);
      attrs = removeAttrs attrs_ [ "trie" ];
      modHeader = ''
        #![allow(
            dead_code,
            clippy::unreadable_literal,
            clippy::redundant_static_lifetimes
        )]

        // This file is automatically generated. Do not edit.
      '';
    in stdenvNoCC.mkDerivation rec {
      name = "ucd_tables";
      version = "0.0.0";

      nativeBuildInputs = [ ucd-generate ];

      dontUnpack = true;
      dontConfigure = true;
      dontBuild = true;
      installPhase = ''
        mkdir $out
        touch $out/mod.rs
        echo ${lib.escapeShellArg modHeader} > $out/mod.rs
        ${lib.concatStringsSep "\n" (lib.attrsets.mapAttrsToList (name: val:
          let
            modName =
              lib.strings.stringAsChars (c: if c == "-" then "_" else c) name;
          in ''
            ucd-generate ${name} \
              --include ${joinList val} \
              ${trieOpt} \
              ${ucd} \
              > $out/${modName}.rs
            echo "pub mod ${modName};" >> $out/mod.rs
          '') attrs)}
      '';
      dontFixup = true;
    };

  textecca = rustPlatform.buildRustPackage rec {
    pname = "textecca";
    version = "0.0.1-alpha";

    src = ./.;

    cargoSha256 = "0000000000000000000000000000000000000000000000000000";

    meta = with lib; {
      description = "";
      license = with licenses; [ agpl3 ];
      maintainers = with maintainers; [ ];
    };
  };

in {
  inherit ucd ucd-generate textecca;
  ucd-tables = ucd-tables {
    general-category = [ "N" "P" "Po" "S" "Zs" "L" "M" ];
    property-bool = [ "XID_Start" "XID_Continue" ];
  };
}
